class Solution {
    public int[][] validArrangement(int[][] pairs) {

        Map<Integer, List<Integer>> graph = new HashMap<>();
        Map<Integer, Integer> outdegree = new HashMap<>();
        Map<Integer, Integer> indegree = new HashMap<>();

        //Build the graph and calculate degrees
        for(int[] pair : pairs) {
            int start = pair[0], end = pair[1];
            graph.computeIfAbsent(start, k -> new ArrayList<>()).add(end);
            outdegree.put(start, outdegree.getOrDefault(start, 0) + 1);
            indegree.put(end, indegree.getOrDefault(end, 0) + 1);
        }
        

        //Find the start node for the Eulerian path
        int startNode = pairs[0][0];
        for(int key : graph.keySet()) {
            if(outdegree.getOrDefault(key, 0) > indegree.getOrDefault(key, 0)) {
                startNode = key;
                break;
            }
        }

        //Perform a DFS to construct the path
        Stack<Integer> stack = new Stack<>();
        List<int[]> result = new ArrayList<>();
        stack.push(startNode);

        while(!stack.isEmpty()) {
            int node = stack.peek();
            if(graph.containsKey(node) && ! graph.get(node).isEmpty()) {
                int nextNode = graph.get(node).remove(graph.get(node).size() - 1);
                stack.push(nextNode);
            }
            else {
                stack.pop();
                if(!stack.isEmpty())
                    result.add(new int[]{stack.peek(), node});
            }
        }

        //Convert the result to the required output format
        Collections.reverse(result);
        return result.toArray(new int[result.size()][]);

    }
}

