import java.util.PriorityQueue;

class Solution {
    public long pickGifts(int[] gifts, int k) {
        // Max-heap to store the number of gifts in each pile
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) -> b - a);
        
        // Insert all elements into the max-heap
        for (int gift : gifts) {
            maxHeap.add(gift);
        }
        
        // Simulate the process for k seconds
        for (int i = 0; i < k; i++) {
            // Extract the maximum element
            int maxGifts = maxHeap.poll();
            
            // Calculate the number of gifts to leave behind
            int remainingGifts = (int) Math.floor(Math.sqrt(maxGifts));
            
            // Insert the remaining gifts back into the heap
            maxHeap.add(remainingGifts);
        }
        
        // Calculate the total remaining gifts
        long totalRemainingGifts = 0;
        while (!maxHeap.isEmpty()) {
            totalRemainingGifts += maxHeap.poll();
        }
        
        return totalRemainingGifts;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] gifts1 = {25, 64, 9, 4, 100};
        int k1 = 4;
        System.out.println(solution.pickGifts(gifts1, k1)); // Output: 29

        int[] gifts2 = {1, 1, 1, 1};
        int k2 = 4;
        System.out.println(solution.pickGifts(gifts2, k2)); // Output: 4
    }
}
