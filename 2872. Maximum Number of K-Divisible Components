import java.util.*;

class Solution {
    public int maxKDivisibleComponents(int n, int[][] edges, int[] values, int k) {
        // Create adjacency list
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] edge : edges) {
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }

        int[] result = new int[1];
        dfs(0, -1, adj, values, k, result);
        return result[0];
    }

    private long dfs(int node, int parent, List<List<Integer>> adj, int[] values, int k, int[] result) {
        long sum = values[node];  // Current node value
        // Adjacent neighbours
        for (int neighbor : adj.get(node)) {
            if (neighbor != parent) {
                sum += dfs(neighbor, node, adj, values, k, result);  // Add subtree values
            }
        }
        if (sum % k == 0) {  // Subtree rooted at this node is k divisible
            result[0]++;  // Increment result
            return 0;
        }
        return sum;
    }
}
