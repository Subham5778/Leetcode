import java.util.PriorityQueue;

class Solution {
    public double maxAverageRatio(int[][] classes, int extraStudents) {
        PriorityQueue<double[]> maxHeap = new PriorityQueue<>((a, b) -> Double.compare(b[0], a[0]));

        
        for (int[] cls : classes) {
            int pass = cls[0];
            int total = cls[1];
            double currentRatio = (double) pass / total;
            double potentialIncrease = (double) (pass + 1) / (total + 1) - currentRatio;
            maxHeap.add(new double[]{potentialIncrease, pass, total});
        }

      
        for (int i = 0; i < extraStudents; i++) {
            double[] top = maxHeap.poll();
            double potentialIncrease = top[0];
            int pass = (int) top[1];
            int total = (int) top[2];
            pass++;
            total++;
            double newRatio = (double) pass / total;
            potentialIncrease = (double) (pass + 1) / (total + 1) - newRatio;
            maxHeap.add(new double[]{potentialIncrease, pass, total});
        }

        
        double totalRatio = 0;
        int n = classes.length;
        while (!maxHeap.isEmpty()) {
            double[] top = maxHeap.poll();
            int pass = (int) top[1];
            int total = (int) top[2];
            totalRatio += (double) pass / total;
        }

        return totalRatio / n;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[][] classes1 = {{1, 2}, {3, 5}, {2, 2}};
        int extraStudents1 = 2;
        System.out.println(solution.maxAverageRatio(classes1, extraStudents1)); 

        int[][] classes2 = {{2, 4}, {3, 9}, {4, 5}, {2, 10}};
        int extraStudents2 = 4;
        System.out.println(solution.maxAverageRatio(classes2, extraStudents2));
    }
}
