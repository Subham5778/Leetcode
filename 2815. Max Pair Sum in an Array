import java.util.*;

class Solution {
    // Helper function to find the largest digit in a number
    private int getMaxDigit(int num) {
        int maxDigit = 0;
        while (num > 0) {
            maxDigit = Math.max(maxDigit, num % 10);
            num /= 10;
        }
        return maxDigit;
    }

    public int maxSum(int[] nums) {
        // Map to group numbers by their largest digit
        Map<Integer, List<Integer>> digitMap = new HashMap<>();

        // Group numbers by their largest digit
        for (int num : nums) {
            int maxDigit = getMaxDigit(num);
            digitMap.putIfAbsent(maxDigit, new ArrayList<>());
            digitMap.get(maxDigit).add(num);
        }

        int maxSum = -1;

        // Calculate the maximum sum for each group
        for (List<Integer> group : digitMap.values()) {
            if (group.size() < 2) continue;
            group.sort((a, b) -> b - a); // Sort the group in descending order
            int sum = group.get(0) + group.get(1);
            maxSum = Math.max(maxSum, sum);
        }

        return maxSum;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] nums1 = {112, 131, 411};
        System.out.println(solution.maxSum(nums1)); // Output: -1

        int[] nums2 = {2536, 1613, 3366, 162};
        System.out.println(solution.maxSum(nums2)); // Output: 5902

        int[] nums3 = {51, 71, 17, 24, 42};
        System.out.println(solution.maxSum(nums3)); // Output: 88
    }
}
