import java.util.Arrays;

public class Solution {
    public int[] getMaximumXor(int[] nums, int maximumBit) {
        int n = nums.length;
        int[] answer = new int[n];
        int xor = 0;
        int maxK = (1 << maximumBit) - 1;  // 2^maximumBit - 1

        // Calculate cumulative XOR of the array
        for (int num : nums) {
            xor ^= num;
        }

        // Find k for each query
        for (int i = 0; i < n; i++) {
            answer[i] = xor ^ maxK;
            xor ^= nums[n - 1 - i];  // Remove the last element for the next query
        }

        return answer;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        int[] nums1 = {0, 1, 1, 3};
        int maximumBit1 = 2;
        System.out.println(Arrays.toString(solution.getMaximumXor(nums1, maximumBit1)));  // Output: [0, 3, 2, 3]

        int[] nums2 = {2, 3, 4, 7};
        int maximumBit2 = 3;
        System.out.println(Arrays.toString(solution.getMaximumXor(nums2, maximumBit2)));  // Output: [5, 2, 6, 5]

        int[] nums3 = {0, 1, 2, 2, 5, 7};
        int maximumBit3 = 3;
        System.out.println(Arrays.toString(solution.getMaximumXor(nums3, maximumBit3)));  // Output: [4, 3, 6, 4, 6, 7]
    }
}
