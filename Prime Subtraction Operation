class Solution {
    static boolean[] isPrime = new boolean[1001];
    static TreeSet<Integer> primeSet = new TreeSet<>();

    void generatePrimes() {
        Arrays.fill(isPrime, true);

        for(int i = 2; i * i <= 1000; i++) {
            if(!isPrime[i])
                continue;
            for(int j = i * i; j <= 1000; j += i) {
                isPrime[j] = false;
            }
        }

        for(int i = 2; i <= 1000; i++) {
            if(isPrime[i])  
                primeSet.add(i);
        }
    }

    public boolean primeSubOperation(int[] nums) {
        if(primeSet.isEmpty())
            generatePrimes();

        for(int i = nums.length-2; i >= 0; i--) {
            if(nums[i] >= nums[i+1]) {
                Integer prime = primeSet.ceiling(nums[i] - nums[i+1] + 1);
                if(prime == null || prime >= nums[i])
                    return false;
                nums[i] -= prime;
            }
        }
        return true;
        
    }
}

