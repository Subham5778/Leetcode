import java.util.*;

class Solution {
    public int[] leftmostBuildingQueries(int[] heights, int[][] queries) {
        int n = heights.length;
        int totalQueries = queries.length;

        // to store queries ans
        int[] ans = new int[totalQueries];
        Arrays.fill(ans, -1);

        // Max query index -> max Height, query no
        Map<Integer, List<int[]>> mp = new HashMap<>();

        // min heap : maxHeight, query no
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> Integer.compare(a[0], b[0]));

        // 1 : answering basic queries and creating map for remaining
        for (int q = 0; q < totalQueries; q++) {
            int i = queries[q][0];
            int j = queries[q][1];
            if (i < j && heights[i] < heights[j])
                ans[q] = j;
            else if (i > j && heights[i] > heights[j])
                ans[q] = i;
            else if (i == j)
                ans[q] = i;
            else {
                mp.computeIfAbsent(Math.max(i, j), k -> new ArrayList<>()).add(new int[]{Math.max(heights[i], heights[j]), q});
            }
        }

        // 2 : Use priority queue to handle remaining queries
        for (int i = 0; i < n; i++) {
            // check which queries can be answered with index i
            while (!pq.isEmpty() && pq.peek()[0] < heights[i]) {
                ans[pq.poll()[1]] = i;
            }
            // push queries with max index as i in min heap
            if (mp.containsKey(i)) {
                for (int[] it : mp.get(i)) {
                    pq.offer(it);
                }
            }
        }
        return ans;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] heights = {6, 4, 8, 5, 2, 7};
        int[][] queries = {{0, 1}, {0, 3}, {2, 4}, {3, 4}, {2, 2}};
        int[] result = solution.leftmostBuildingQueries(heights, queries);

        // Print the result
        System.out.println(Arrays.toString(result));
    }
}
